# utils/ui.py
from __future__ import annotations
import math, json
from datetime import datetime, timedelta
from typing import Dict, List, Tuple

import numpy as np
import pandas as pd
import folium
import streamlit as st

from utils.constants import KEY_COL, CRIME_TYPES
from utils.forecast import pois_pi90

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ KÃœÃ‡ÃœK VE TUTARLI TÄ°POGRAFÄ° â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
SMALL_UI_CSS = """
<style>
/* === GENEL: tÃ¼m yazÄ±lar kÃ¼Ã§Ã¼k, satÄ±r aralÄ±ÄŸÄ± dar === */
html, body, [class*="css"] { font-size: 12px; line-height: 1.28; }

/* === BaÅŸlÄ±klar (yalnÄ±zca H1 bÃ¼yÃ¼k) === */
h1 { font-size: 1.9rem; line-height: 1.2; margin: .45rem 0 .35rem 0; }
h2 { font-size: .95rem;  margin: .25rem 0; }
h3 { font-size: .88rem;  margin: .18rem 0; }

/* === Ä°Ã§ boÅŸluklarÄ± sÄ±kÄ±laÅŸtÄ±r === */
section.main > div.block-container { padding-top: .55rem; padding-bottom: .10rem; }
[data-testid="stSidebar"] .block-container { padding-top: .25rem; padding-bottom: .25rem; }
div.element-container { margin-bottom: .22rem; }

/* === Form/label/yardÄ±m metinleri === */
label, .stMarkdown p, .stCaption, .stText, .stRadio, .stSelectbox, .stNumberInput { font-size: .82rem; }
small, .stCaption, .st-emotion-cache-1wbqy5l { font-size: .74rem; }

/* === Butonlar === */
.stButton > button,
.stDownloadButton > button {
  font-size: .80rem;
  padding: 4px 10px;
  border-radius: 8px;
}

/* === Slider & input iÃ§erikleri === */
[data-testid="stSlider"] { padding-top: .10rem; padding-bottom: .05rem; }
input, textarea { font-size: .80rem !important; }

/* === Metric kartlarÄ± (genel) === */
[data-testid="stMetricValue"] { font-size: .95rem; }
[data-testid="stMetricLabel"] { font-size: .68rem; color:#666; }
[data-testid="stMetric"]      { padding: .06rem 0 .02rem 0; }

/* st.metric ellipsis dÃ¼zeltmesi (label kesilmesin) */
[data-testid="stMetricLabel"] p{
  max-width:none !important;
  overflow:visible !important;
  text-overflow:clip !important;
  white-space:nowrap !important;
  margin:0 !important;
}

/* Risk Ã–zeti bloÄŸu (bir tÄ±k daha kÃ¼Ã§Ã¼k) */
#risk-ozet [data-testid="stMetricValue"] { font-size: .90rem; line-height: 1.0; }
#risk-ozet [data-testid="stMetricLabel"] { font-size: .64rem; color:#6b7280; }
#risk-ozet [data-testid="stMetric"]      { padding: .04rem 0 .01rem 0; }

/* === Tablo/DataFrame (baÅŸlÄ±k + gÃ¶vde aynÄ± boy) === */
[data-testid="stDataFrame"] { font-size: .70rem; }

/* hem baÅŸlÄ±k hem gÃ¶vdeyi eÅŸitle + satÄ±r/paddingâ€™i daralt */
[data-testid="stDataFrame"] thead,
[data-testid="stDataFrame"] th,
[data-testid="stDataFrame"] td {
  font-size: .70rem;
  line-height: 1.15;
  padding-top: 4px;
  padding-bottom: 4px;
}

/* tablo araÃ§ Ã§ubuÄŸu (indir vb.) bir tÄ±k kÃ¼Ã§Ã¼lt */
[data-testid="stElementToolbar"] button { transform: scale(.90); }
/* === Expander baÅŸlÄ±klarÄ± === */
.st-expanderHeader, [data-baseweb="accordion"] { font-size: .80rem; }

/* === Radio/checkbox aralÄ±klarÄ±nÄ± daralt === */
.stRadio > label, .stCheckbox > label { margin-bottom: .08rem; }

/* === Ãœst menÃ¼/footer (isteÄŸe baÄŸlÄ±) === */
#MainMenu { visibility: hidden; }
footer { visibility: hidden; }

/* === Ã–zel KPI kartÄ± (tooltip destekli) === */
.kpi{display:flex;flex-direction:column;gap:2px}
.kpi-label{font-size:.68rem;color:#6b7280}
.kpi-value{font-size:.95rem;font-weight:600}
</style>
"""

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ KPI satÄ±rÄ± (tooltip'li, tek tip gÃ¶rÃ¼nÃ¼m) â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
def render_kpi_row(items: list[tuple[str, str | float, str]]):
    """
    items = [(label, value, tooltip), ...]
    Tooltip tarayÄ±cÄ± 'title' ile gÃ¶sterilir.
    """
    cols = st.columns(len(items))
    for col, (label, value, tip) in zip(cols, items):
        col.markdown(
            f"""
            <div class="kpi" title="{tip}">
              <div class="kpi-label">{label}</div>
              <div class="kpi-value">{value}</div>
            </div>
            """,
            unsafe_allow_html=True,
        )

# --- Ã§eviri eÅŸleÅŸtirmeleri ---
TR_LABEL = {
    "assault":   "SaldÄ±rÄ±",
    "burglary":  "Konut/Ä°ÅŸyeri HÄ±rsÄ±zlÄ±ÄŸÄ±",
    "theft":     "HÄ±rsÄ±zlÄ±k",
    "robbery":   "Soygun",
    "vandalism": "Vandalizm",
}
CUE_MAP = {
    "assault":   ["bar/eÄŸlence Ã§Ä±kÄ±ÅŸlarÄ±", "meydan/park gÃ¶zetimi"],
    "robbery":   ["metro/otobÃ¼s duraÄŸÄ± & ATM", "dar sokak giriÅŸ/Ã§Ä±kÄ±ÅŸ"],
    "theft":     ["otopark ve araÃ§ park alanlarÄ±", "bagaj/bisiklet kilidi"],
    "burglary":  ["arka sokak & yÃ¼kleme kapÄ±larÄ±", "kapanÄ±ÅŸ sonrasÄ± iÅŸyerleri"],
    "vandalism": ["okul/park/altgeÃ§it", "inÅŸaat sahasÄ± kontrolÃ¼"],
}

def actionable_cues(top_types: list[tuple[str, float]], max_items: int = 3) -> list[str]:
    tips: list[str] = []
    for crime, _ in top_types[:2]:
        tips.extend(CUE_MAP.get(crime, [])[:2])
    seen, out = set(), []
    for t in tips:
        if t not in seen:
            seen.add(t); out.append(t)
        if len(out) >= max_items: break
    return out

def confidence_label(q10: float, q90: float) -> str:
    width = q90 - q10
    if width < 0.18: return "yÃ¼ksek"
    if width < 0.30: return "orta"
    return "dÃ¼ÅŸÃ¼k"

def risk_window_text(start_iso: str, horizon_h: int) -> str:
    start = datetime.fromisoformat(start_iso)
    hours = np.arange(horizon_h)
    diurnal = 1.0 + 0.4 * np.sin((((start.hour + hours) % 24 - 18) / 24) * 2 * np.pi)
    if diurnal.size == 0:
        t2 = start
    else:
        thr = np.quantile(diurnal, 0.75)
        hot = np.where(diurnal >= thr)[0]
        if len(hot) == 0:
            t2 = start + timedelta(hours=horizon_h)
            return f"{start:%H:%M}â€“{t2:%H:%M}"
        splits = np.split(hot, np.where(np.diff(hot) != 1)[0] + 1)
        seg = max(splits, key=len)
        t1 = start + timedelta(hours=int(seg[0]))
        t2 = start + timedelta(hours=int(seg[-1]) + 1)
        t_peak = start + timedelta(hours=int(seg[len(seg)//2]))
        return f"{t1:%H:%M}â€“{t2:%H:%M} (tepe â‰ˆ {t_peak:%H:%M})"
    return f"{start:%H:%M}â€“{t2:%H:%M}"

def render_result_card(df_agg: pd.DataFrame, geoid: str, start_iso: str, horizon_h: int):
    if df_agg is None or df_agg.empty or geoid is None:
        st.info("BÃ¶lge seÃ§ilmedi.")
        return
    row = df_agg.loc[df_agg[KEY_COL] == geoid]
    if row.empty:
        st.info("SeÃ§ilen bÃ¶lge iÃ§in veri yok.")
        return
    row = row.iloc[0].to_dict()

    # Near-repeat (yakÄ±n tekrar) etkisi â€” satÄ±rdan oku, yoksa 0.0
    nr = float(row.get("nr_boost", 0.0))

    type_lams = {t: float(row.get(t, 0.0)) for t in CRIME_TYPES}
    type_probs = {TR_LABEL[t]: 1.0 - math.exp(-lam) for t, lam in type_lams.items()}
    probs_sorted = sorted(type_probs.items(), key=lambda x: x[1], reverse=True)

    top2 = [name for name, _ in probs_sorted[:2]]
    pi90_lines = []
    for name_tr, _p in probs_sorted[:2]:
        t_eng = next(k for k, v in TR_LABEL.items() if v == name_tr)
        lam = type_lams[t_eng]
        lo, hi = pois_pi90(lam)
        pi90_lines.append(f"{name_tr}: {lam:.1f} ({lo}â€“{hi})")

    q10 = float(row.get("q10", 0.0)); q90 = float(row.get("q90", 0.0))
    conf_txt = confidence_label(q10, q90)
    win_text = risk_window_text(start_iso, horizon_h)

    st.markdown("### ðŸ§­ SonuÃ§ KartÄ±")
    c1, c2, c3 = st.columns([1.0, 1.2, 1.2])
    with c1:
        st.metric("BÃ¶lge (GEOID)", geoid)
        st.metric("Ã–ncelik", str(row.get("tier", "â€”")))
        st.metric("Ufuk", f"{horizon_h} saat")
    with c2:
        st.markdown("**OlasÄ±lÄ±klar (Pâ‰¥1, tÃ¼r bazÄ±nda)**")
        for name_tr, p in probs_sorted:
            st.write(f"- {name_tr}: {p:.2f}")
    with c3:
        st.markdown("**Beklenen sayÄ±lar (90% PI)**")
        for line in pi90_lines:
            st.write(f"- {line}")
    st.markdown("---")
    st.markdown(f"**Top-2 Ã¶neri:** {', '.join(top2) if top2 else 'â€”'}")
    # Near-repeat bilgisi burada gÃ¶sterilir
    st.markdown(
        f"- **Near-repeat etkisi:** {nr:.2f} (0=etki yok, 1=yÃ¼ksek). "
        "Taze olay Ã§evresinde kÄ±sa ufukta risk artar."
    )
    st.markdown(f"- **Risk penceresi:** {win_text}  \n- **GÃ¼ven:** {conf_txt} (q10={q10:.2f}, q90={q90:.2f})")

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ Harita â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
def color_for_tier(tier: str) -> str:
    return {"YÃ¼ksek": "#d62728", "Orta": "#ff7f0e", "Hafif": "#1f77b4"}.get(tier, "#1f77b4")

def build_map_fast(df_agg: pd.DataFrame, geo_features: list, geo_df: pd.DataFrame,
                   show_popups: bool = False, patrol: Dict | None = None) -> folium.Map:
    m = folium.Map(location=[37.7749, -122.4194], zoom_start=12, tiles="cartodbpositron")
    if df_agg is None or df_agg.empty: return m

    color_map = {r[KEY_COL]: color_for_tier(r["tier"]) for _, r in df_agg.iterrows()}
    data_map = df_agg.set_index(KEY_COL).to_dict(orient="index")

    features = []
    for feat in geo_features:
        f = json.loads(json.dumps(feat))
        gid = f["properties"].get("id")
        row = data_map.get(gid)
        if row:
            expected = float(row["expected"])
            tier     = str(row["tier"])
            q10      = float(row["q10"]); q90 = float(row["q90"])
            types    = {t: float(row[t]) for t in CRIME_TYPES}
            top3     = sorted(types.items(), key=lambda x: x[1], reverse=True)[:3]
            top_html = "".join([f"<li>{t}: {v:.2f}</li>" for t, v in top3])
            f["properties"]["popup_html"] = (
                f"<b>{gid}</b><br/>E[olay] (ufuk): {expected:.2f} â€¢ Ã–ncelik: <b>{tier}</b><br/>"
                f"<b>En olasÄ± 3 tip</b><ul style='margin-left:12px'>{top_html}</ul>"
                f"<i>Belirsizlik (saatlik ort.): q10={q10:.2f}, q90={q90:.2f}</i>"
            )
            f["properties"]["expected"] = round(expected, 2)
            f["properties"]["tier"]     = tier
        features.append(f)

    fc = {"type": "FeatureCollection", "features": features}
    def style_fn(feat):
        gid = feat["properties"].get("id")
        return {"fillColor": color_map.get(gid, "#9ecae1"), "color": "#666666", "weight": 0.3, "fillOpacity": 0.55}

    tooltip = folium.GeoJsonTooltip(
        fields=["id", "tier", "expected"],
        aliases=["GEOID", "Ã–ncelik", "E[olay]"],
        localize=True, sticky=False
    ) if show_popups else None

    popup = folium.GeoJsonPopup(
        fields=["popup_html"],
        labels=False, parse_html=False, max_width=280
    ) if show_popups else None

    folium.GeoJson(fc, style_function=style_fn, tooltip=tooltip, popup=popup).add_to(m)

    # Ãœst %1 uyarÄ±
    thr99 = np.quantile(df_agg["expected"].to_numpy(), 0.99)
    urgent = df_agg[df_agg["expected"] >= thr99].merge(
        geo_df[[KEY_COL, "centroid_lat", "centroid_lon"]], on=KEY_COL
    )
    for _, r in urgent.iterrows():
        folium.CircleMarker(
            location=[r["centroid_lat"], r["centroid_lon"]],
            radius=5, color="#000", fill=True, fill_color="#ff0000"
        ).add_to(m)

    if patrol and patrol.get("zones"):
        for z in patrol["zones"]:
            folium.PolyLine(z["route"], tooltip=f"{z['id']} rota").add_to(m)
            folium.Marker(
                [z["centroid"]["lat"], z["centroid"]["lon"]],
                icon=folium.DivIcon(html="<div style='background:#111;color:#fff;padding:2px 6px;border-radius:6px'>"
                                         f" {z['id']} </div>")
            ).add_to(m)
    return m
